name: Build and Release .deb Package with Ephemeral GPG Key

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Install dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y shc dpkg-dev debsigs lintian gpg

      # 3. Generate an ephemeral GPG key for signing
      - name: Generate Ephemeral GPG Key
        run: |
          cat > gpg-key.conf <<EOF
          Key-Type: RSA
          Key-Length: 4096
          Subkey-Type: RSA
          Subkey-Length: 4096
          Name-Real: GitHub CI
          Name-Comment: Ephemeral key for CI signing
          Name-Email: ci@example.com
          Expire-Date: 0
          %commit
          gpg --batch --generate-key gpg-key.conf
          rm gpg-key.conf
          gpg --list-keys --with-colons

      # 4. Retrieve the ephemeral key ID
      - name: Get Ephemeral Key ID
        id: keyid
        run: |
          KEY_ID=$(gpg --list-keys --with-colons | awk -F: '/^pub/ {print $5; exit}')
          echo "Key ID: $KEY_ID"
          echo "::set-output name=KEY_ID::$KEY_ID"

      # 5. Build binary from shell script using shc (using the -r flag for a relocatable binary)
      - name: Build Binary from Shell Script
        run: |
          chmod +x picoctf.sh
          shc -r -f picoctf.sh
          mv picoctf.sh.x picoctf
          ls -l picoctf

      # 6. Create .deb package structure
      - name: Create .deb Package Structure
        run: |
          mkdir -p package/DEBIAN
          mkdir -p package/usr/local/bin
          cp picoctf package/usr/local/bin/
          chmod +x package/usr/local/bin/picoctf
          echo "Package: picoctf" > package/DEBIAN/control
          echo "Version: 1.0" >> package/DEBIAN/control
          echo "Section: utils" >> package/DEBIAN/control
          echo "Priority: optional" >> package/DEBIAN/control
          echo "Architecture: all" >> package/DEBIAN/control
          echo "Depends: bash" >> package/DEBIAN/control
          echo "Maintainer: Mahros <mahros.elqabasy@gmail.com>" >> package/DEBIAN/control
          echo "Origin: picoctf" >> package/DEBIAN/control
          echo "Description: A versatile command-line tool for handling picoCTF flags." >> package/DEBIAN/control
          echo " This package provides functionality to wrap input into the picoCTF flag format," >> package/DEBIAN/control
          echo " extract the first picoCTF flag from given text or files, and format input to ensure" >> package/DEBIAN/control
          echo " proper capitalization and spacing for picoCTF challenges." >> package/DEBIAN/control
          cat package/DEBIAN/control

      # 7. Build the .deb package
      - name: Build .deb Package
        run: |
          dpkg-deb --build --root-owner-group package picoctf.deb
          ls -l picoctf.deb

      # 8. Sign the .deb package using debsigs with the ephemeral key
      # - name: Sign .deb Package with GPG
      #   run: |
      #     KEY_ID="${{ steps.keyid.outputs.KEY_ID }}"
      #     echo "Signing using key: $KEY_ID"
      #     debsigs --sign=origin -k "$KEY_ID" picoctf.deb

      # 9. Validate the package using lintian
      # - name: Validate Package with Lintian
      #   run: |
      #     lintian picoctf.deb || true

      # 10. Test package installation in a Debian container
      - name: Test Package Installation in Docker Container
        run: |
          docker run --rm -v "$(pwd):/packages" debian:latest bash -c "apt-get update && dpkg -i /packages/picoctf.deb && picoctf --help"

      # 11. Create a GitHub Release and attach the .deb package
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ github.sha }}"
          name: "Release ${{ github.sha }}"
          body: "Automated release of picoCTF package with ephemeral GPG key"
          files: picoctf.deb
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
